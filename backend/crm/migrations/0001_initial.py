# Generated by Django 5.2.4 on 2025-08-01 08:17

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Competency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Kompetencija',
                'verbose_name_plural': 'Kompetencijos',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Komponentas',
                'verbose_name_plural': 'Komponentai',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Focus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Dėmesio kryptis',
                'verbose_name_plural': 'Dėmesio kryptys',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Mokymo lygis',
                'verbose_name_plural': 'Mokymo lygiai',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Tikslas',
                'verbose_name_plural': 'Tikslai',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Gebėjimas',
                'verbose_name_plural': 'Gebėjimai',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Dalykas',
                'verbose_name_plural': 'Dalykai',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Tema',
                'verbose_name_plural': 'Temos',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Virtue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Dorybė',
                'verbose_name_plural': 'Dorybės',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=30, verbose_name='phone number')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('student', 'Student'), ('parent', 'Parent'), ('curator', 'Curator'), ('mentor', 'Mentor')], max_length=20, verbose_name='role')),
                ('contract_number', models.CharField(blank=True, max_length=100, verbose_name='contract number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
                ('assessment_criteria', models.TextField(blank=True, verbose_name='Vertinimo kriterijai')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sukurta')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atnaujinta')),
                ('competencies', models.ManyToManyField(blank=True, to='crm.competency', verbose_name='Kompetencijos')),
                ('components', models.ManyToManyField(blank=True, to='crm.component', verbose_name='Komponentai')),
                ('focus', models.ManyToManyField(blank=True, to='crm.focus', verbose_name='Dėmesio kryptys')),
                ('mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lessons_mentored', to=settings.AUTH_USER_MODEL, verbose_name='Mentorius')),
                ('levels', models.ManyToManyField(blank=True, to='crm.level', verbose_name='Mokymo lygiai')),
                ('objectives', models.ManyToManyField(blank=True, to='crm.objective', verbose_name='Tikslai')),
                ('skills', models.ManyToManyField(blank=True, to='crm.skill', verbose_name='Gebėjimai')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='crm.subject', verbose_name='Dalykas')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='crm.topic', verbose_name='Tema')),
                ('virtues', models.ManyToManyField(blank=True, to='crm.virtue', verbose_name='Dorybės')),
            ],
            options={
                'verbose_name': 'Pamoka',
                'verbose_name_plural': 'Pamokos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.IntegerField(help_text='Vertinimas procentais (0-100)', validators=[django.core.validators.MinValueValidator(0, 'Procentai negali būti mažiau nei 0'), django.core.validators.MaxValueValidator(100, 'Procentai negali būti daugiau nei 100')], verbose_name='Procentai')),
                ('notes', models.TextField(blank=True, verbose_name='Pastabos')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sukurta')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atnaujinta')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades_given', to=settings.AUTH_USER_MODEL, verbose_name='Mentorius')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades_received', to=settings.AUTH_USER_MODEL, verbose_name='Mokinys')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='crm.lesson', verbose_name='Pamoka')),
            ],
            options={
                'verbose_name': 'Pažymys',
                'verbose_name_plural': 'Pažymiai',
                'ordering': ['-created_at'],
                'unique_together': {('student', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='StudentCurator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('curator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curator_students', to=settings.AUTH_USER_MODEL, verbose_name='curator')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_curators', to=settings.AUTH_USER_MODEL, verbose_name='student')),
            ],
            options={
                'verbose_name': 'student-curator relationship',
                'verbose_name_plural': 'student-curator relationships',
                'unique_together': {('student', 'curator', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='StudentParent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_students', to=settings.AUTH_USER_MODEL, verbose_name='parent')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_parents', to=settings.AUTH_USER_MODEL, verbose_name='student')),
            ],
            options={
                'verbose_name': 'student-parent relationship',
                'verbose_name_plural': 'student-parent relationships',
                'unique_together': {('student', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='StudentSubjectLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.level', verbose_name='level')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_levels', to=settings.AUTH_USER_MODEL, verbose_name='student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.subject', verbose_name='subject')),
            ],
            options={
                'verbose_name': 'student subject level',
                'verbose_name_plural': 'student subject levels',
                'unique_together': {('student', 'subject', 'level')},
            },
        ),
        migrations.CreateModel(
            name='MentorSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_subjects', to=settings.AUTH_USER_MODEL, verbose_name='mentor')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.subject', verbose_name='subject')),
            ],
            options={
                'verbose_name': 'mentor subject',
                'verbose_name_plural': 'mentor subjects',
                'unique_together': {('mentor', 'subject')},
            },
        ),
    ]
